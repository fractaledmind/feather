# frozen_string_literal: true

module Feather
	class Lexer
		class Character
			# rubocop:disable Layout/LeadingCommentSpace
			TYPE_MAP = [
				#x0  x1  x2  x3  x4  x5  x6  x7  x8  x9  xa  xb  xc  xd  xe  xf
				29, 28, 28, 28, 28, 28, 28, 28, 28,  7,  7, 28,  7,  7, 28, 28, # 0x
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, # 1x
				7, 15,  8,  5,  4, 22, 24,  8, 17, 18, 21, 20, 23, 11, 26, 16,  # 2x
				3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  5, 19, 12, 14, 13,  6,  # 3x
				5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  # 4x
				1,  1,  1,  1,  1,  1,  1,  1,  0,  2,  2,  9, 28, 28, 28,  2,  # 5x
				8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  # 6x
				1,  1,  1,  1,  1,  1,  1,  1,  0,  2,  2, 28, 10, 28, 25, 28,  # 7x
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, # 8x
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, # 9x
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, # Ax
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, # Bx
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, # Cx
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, # Dx
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 30, # Ex
				27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27  # Fx
			]
			# rubocop:enable Layout/LeadingCommentSpace

			# The following 256 byte lookup table is used to encode the characteristics
			# of each ASCII character in a bitmask:
			#
			#		space?		0x01
			#		alpha?		0x02
			#		digit?		0x04
			#		alnum?		0x06
			#		xdigit?		0x08
			#		to_upper	0x20
			#		id?				0x40
			#		quote?		0x80
			#
			# Bit 0x40 is set if the character is non-alphanumeric and can be used in an
			# SQLite identifier.  Identifiers are alphanumerics, "_", "$", and any
			# non-ASCII UTF character. Hence the test for whether or not a character is
			# part of an identifier is 0x46.
			FLAG_MAP = [
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 00..07    ........
				0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,  # 08..0f    ........
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 10..17    ........
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 18..1f    ........
				0x01, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x80,  # 20..27     !"#$%&'
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 28..2f    ()*+,-./
				0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,  # 30..37    01234567
				0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 38..3f    89:;<=>?
				0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x02,  # 40..47    @ABCDEFG
				0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  # 48..4f    HIJKLMNO
				0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  # 50..57    PQRSTUVW
				0x02, 0x02, 0x02, 0x80, 0x00, 0x00, 0x00, 0x40,  # 58..5f    XYZ[\]^_
				0x80, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x22,  # 60..67    `abcdefg
				0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,  # 68..6f    hijklmno
				0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,  # 70..77    pqrstuvw
				0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,  # 78..7f    xyz{|}~.
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # 80..87    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # 88..8f    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # 90..97    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # 98..9f    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # a0..a7    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # a8..af    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # b0..b7    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # b8..bf    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # c0..c7    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # c8..cf    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # d0..d7    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # d8..df    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # e0..e7    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # e8..ef    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  # f0..f7    ........
				0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40   # f8..ff    ........
			]

			attr_reader :character, :type, :flags

			def initialize(character)
				@character = character
				@type = TYPE_MAP[character.ord]
				@flags = FLAG_MAP[character.ord]
			end

			def space?		=		@flags & 0x01 != 0
			def alnum?		=		@flags & 0x06 != 0
			def alpha?		=		@flags & 0x02 != 0
			def digit?		=		@flags & 0x04 != 0
			def xdigit?		=		@flags & 0x08 != 0
			def quote?		=		@flags & 0x80 != 0
			def id?				=		@flags & 0x46 != 0

			def ord = @character.ord
			def ==(other)	=	ord == other&.ord
			def to_s = @character.to_s
		end
	end
end
